git is a version control system which is a tool used for tracking changes in the code

apart from the git there are more version control systems available such as

1.mercurial
2.bazaar

Git is considered better because it is faster, more flexible, has stronger branching and merging, 
a larger community, and wider tool support compared to Mercurial and Bazaar.

touch filename.extension     --  this is the command to create the file in the folder with command.


git provides us 2 major benifits 
1. to track the history 
2. collaboration with other developers


1) It helps us to track the history till which the code is implemented and if we wanted to go back to previous version of our code 
its ok for small project to manually change all the things but for large scale projects its important to automate it because there is risk of 
deletion of importnat part deletoin of the project..

~  <- This sign indicates that we are in our root directory

Configuring the git means for which account we want to login to the github pages and from which of our account we want to do the changes ?
thats all the things which are important.

2) there is two types of setup which we can do thats first is Global setup and second is Local setup which we can do with different accounts


Command--

git config --global user.name "My name"
git config --global user.email "myemail@gmail.com"
git config --list


git log   - to check all the commits made from  the local stroage..


we can obviously write all the commands onto the git bash directly but when it comes to the working and updating all the things we have to
do it with the development in vs code so we will be writing all the commands into the terminal of the vs code


Commands --

git clone  <link>  - clone command is used to clone a repo from github (remote place) to our local machine..
ls           - list files present in the directory 
ls -a        - it will show all the files including hidden files..        // imp
pwd          - present working directory..
git status       - displays the status of the code

when ever we use the git status we always have 4 types of status
1) untracked   - new files that git dosen't yet tracked
2) modified    - changed something in existing files
3) staged      - file is ready to be commited
4) unmodified  - unchanged 


commands --

git add <file name> - adds new or changed files into your working directory to the git staging area.
or to add all the files you have to do 

git add .  - which will add all the files into the directory..

after adding the file you have to commet the changes in the file

git commet -m < some message>

git push origin main - is used to upload the files to the github

git push -u origin main -to continuously add the changes only in the main and avoid using origin main every time..
git push -u origin main         -   (-u)  indicates that we dont have to write te origin main everytime we want to push the code.






27-04-25

when new folder is created in the local machine it is not the git repo and git or github don't know any thing about this so we have to add it
successfully on the github to do that the following commands are important.

to make it git repo and add the git in it 
we use the 


commands-- 

git init                        - adds .git in the loacal folder
git remote add origin <link>    - the command to add the folder onto the github from device to the website directly.
git remote -v                   - v to verify remote
git branch                      - to check branch
git branch -M main              - to rename branch
git push origin main            -  to push the changes onto the github


@# git log   -- to check all the commits made from  the local stroage..



when there is more than 1 persion working on a project we have to create new branches to add new features without having to wait for other persion

so after all the work is done we have to mearge the branches to do that these commands will be helping us.

commands--

git branch                    - to check on which branch we are
git checkout <branch name>    - to navigate from one branch to another (you should be entering the branch name in which you want to go..)
git checkout -b <branch name> - to create new branch 
git branch  -d <branch name>  -  to delete the branch..(you cannot delete the current branch)


you can easily create the branches and do the changes in it which ever you want and after doing that change in the branch if you switched
to the main branch then you will be seeing the main code which you have done 

if you want to combine two branches after long time of changes in code and many commits

commands -- 

1) way to combine two different branches with each other..

git diff <branch name>      - to compare commits, files, branches and more..
git merge <branc name>      - to merge 2 branches.. 


2) by github pull request  or by    creating the PR- (pull request).

and when these changes are done these changes are visible in the github but this is not visible into the local system so to do that you 
have to do the 

command -- 

git pull origin main - this will add the updates onto the local system from the website



##################################

Merge conflicts    - and it's resolving

an event that takes place when git is unable to automatically resolve the differences in code between 2 conflicts...

#################################
Undoing changes

1- Staged (added) changes but not commited

commands -- 
git reset <file name>     - to take the entire code back to the orignal stage. unoing the change for specific file
git reset                 - undoing changes for all the files..


2- commited changes( for one commit)

git reset HEAD ~1  - this command takes the changes one step back from the current status of the code.


3- commited changes (for many commits)

git reset <commit hash >  - with the help of the git log you will be able to see the commit hash with which you will be able to go directly to that 
                            change skipping alll the intermidiate changes..
git reset --hard <commit hash >  - it not only removes all the changes from the file and github but also it will be removing 
                            all the changes form the vs code which will be hleping for maintaning the changes without any extra error.




Fork--   Rough copy of the project



git push origin --delete feature2 when you create new branch but after that you rename it locally.
in the github 2 repo's are created so to handle them perfectly you have to manyally delete the previous branch name
with this command 

git push origin --delete <branch name>


